// Generated by LiveScript 1.2.0
(function(){
  var ref$, id, Obj, map, concat, filter, each, find, fold, foldr, fold1, zip, head, tail, all, flatten, sum, groupBy, objToPairs, partition, join, unique, sortBy, reverse, empty, request, ch, fs, sh, css, path, bindA, mapA, parseCss, fixCssRule, fixCssDeclaration, fixCssUrl, downloadAndSaveUrls, host;
  ref$ = require('prelude-ls'), id = ref$.id, Obj = ref$.Obj, map = ref$.map, concat = ref$.concat, filter = ref$.filter, each = ref$.each, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, zip = ref$.zip, head = ref$.head, tail = ref$.tail, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique, sortBy = ref$.sortBy, reverse = ref$.reverse, empty = ref$.empty;
  request = require('request');
  ch = require('cheerio');
  fs = require('fs');
  sh = require('execSync');
  css = require('css');
  path = require('path');
  ref$ = require('./async.ls'), bindA = ref$.bindA, mapA = ref$.mapA;
  parseCss = function(text, callback){
    var cssObj;
    cssObj = css.parse(text);
    return cssObj.stylesheet.rules = map(fixCssRule, cssObj.stylesheet.rules);
  };
  fixCssRule = function(rule){
    if (!!rule.declarations) {
      rule.declarations = map(fixCssDeclaration, rule.declarations);
    }
    return rule;
  };
  fixCssDeclaration = function(declaration){
    var regex, property, value;
    regex = /^url\s*\(['"]?([\w./-]+)["']?\)(.*)$/;
    property = declaration.property;
    value = declaration.value;
    if (('background-image' === property || 'background' === property) && regex.test(value)) {
      console.log(property, value, value.replace(regex, 'url(\'' + fixCssUrl(regex.exec(value)[1]) + "')$2"));
    }
    return declaration;
  };
  fixCssUrl = function(url){
    var currentPath;
    currentPath = '/_common/css/';
    return path.normalize(currentPath + url);
  };
  downloadAndSaveUrls = function(urls, filename, callback){
    return mapA(function(url, cb){
      return request(url, function(e, r, b){
        console.log("Got " + url + " " + b.length);
        return cb(b);
      });
    }, urls, function(err, arr){
      console.log('all downloaded');
      fs.writeFileSync(filename, join('\n\n', arr));
      return callback(arr);
    });
  };
  host = 'http://fun.mozook.com';
  request({
    url: host + '/?pageid=526',
    headers: {
      'User-Agent': 'Minify-lp, Homam'
    }
  }, function(error, response, body){
    var $, urls;
    $ = ch.load(body, {
      ignoreWhitespace: true
    });
    urls = map(function(){
      return (function(it){
        return host + it;
      })(function(it){
        return it.attribs.src;
      }.apply(this, arguments));
    })(
    $('head script[src]'));
    console.log(urls);
    sh.exec('mkdir out');
    return downloadAndSaveUrls(urls, 'out/all.js', function(_){
      var urls;
      console.log('all.js written');
      sh.exec('./closure-compiler.sh out/all.js out/all.min.js');
      console.log('all.min.js written');
      urls = filter(function(it){
        return it.indexOf('.css') > 0;
      })(
      map(function(){
        return (function(it){
          return host + it;
        })(function(it){
          return it.attribs.href;
        }.apply(this, arguments));
      })(
      $('head link[href]')));
      console.log(urls);
      return downloadAndSaveUrls(urls, 'out/all.css', function(_){
        return console.log('all.css written');
      });
    });
  });
}).call(this);
