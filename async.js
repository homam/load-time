// Generated by LiveScript 1.2.0
(function(){
  var ref$, id, odd, Obj, map, concat, filter, each, find, fold, foldr, fold1, zip, head, tail, all, flatten, sum, groupBy, objToPairs, partition, join, unique, sortBy, reverse, empty, bindA, mapA, filterA, anyA, allA, findA, sortByA, f1, f2, f3, f4;
  ref$ = require('prelude-ls'), id = ref$.id, odd = ref$.odd, Obj = ref$.Obj, map = ref$.map, concat = ref$.concat, filter = ref$.filter, each = ref$.each, find = ref$.find, fold = ref$.fold, foldr = ref$.foldr, fold1 = ref$.fold1, zip = ref$.zip, head = ref$.head, tail = ref$.tail, all = ref$.all, flatten = ref$.flatten, sum = ref$.sum, groupBy = ref$.groupBy, objToPairs = ref$.objToPairs, partition = ref$.partition, join = ref$.join, unique = ref$.unique, sortBy = ref$.sortBy, reverse = ref$.reverse, empty = ref$.empty;
  bindA = curry$(function(f, g){
    return function(x, callback){
      return f(x, function(err, fx){
        return callback(err, g(fx, x));
      });
    };
  });
  mapA = curry$(function(f, xs, callback){
    var results, got;
    xs = zip(xs, (function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = xs.length - 1; i$ <= to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }()));
    results = [];
    got = curry$(function(i, err, r){
      if (!!err) {
        callback(err, function(){
          return map(function(arg$){
            var r, _;
            r = arg$[0], _ = arg$[1];
            return r;
          })(sortBy(function(arg$){
            var _, i;
            _ = arg$[0], i = arg$[1];
            return i;
          }).apply(this, arguments));
        }(
        results));
      } else {
        results = results.concat([[r, i]]);
        if (results.length === xs.length) {
          callback(null, function(){
            return map(function(arg$){
              var r, _;
              r = arg$[0], _ = arg$[1];
              return r;
            })(sortBy(function(arg$){
              var _, i;
              _ = arg$[0], i = arg$[1];
              return i;
            }).apply(this, arguments));
          }(
          results));
        }
      }
    });
    each(function(arg$){
      var x, i;
      x = arg$[0], i = arg$[1];
      return f(x, got(i));
    })(
    xs);
  });
  filterA = function(f, xs, callback){
    var g;
    g = bindA(f, function(fx, x){
      return [fx, x];
    });
    mapA(g, xs, function(err, results){
      return callback(err, function(){
        return map(function(arg$){
          var _, x;
          _ = arg$[0], x = arg$[1];
          return x;
        })(filter(function(arg$){
          var s, _;
          s = arg$[0], _ = arg$[1];
          return s;
        }).apply(this, arguments));
      }(
      results));
    });
  };
  anyA = function(f, xs, callback){
    var howManyGot, callbackCalled, got;
    howManyGot = 0;
    callbackCalled = false;
    got = function(err, res){
      var call;
      call = function(){
        if (!callbackCalled) {
          callbackCalled = true;
          return callback(err, res);
        }
      };
      howManyGot = howManyGot + 1;
      if (!!err || res || howManyGot === xs.length) {
        return call();
      }
    };
    each(function(x){
      return f(x, got);
    })(
    xs);
  };
  allA = function(f, xs, callback){
    var g;
    g = bindA(f, function(fx, _){
      return !fx;
    });
    anyA(g, xs, function(err, res){
      return callback(err, !res);
    });
  };
  findA = function(f, xs, callback){
    var howManyGot, callbackCalled, got;
    howManyGot = 0;
    callbackCalled = false;
    got = curry$(function(x, err, res){
      var call;
      call = function(){
        if (!callbackCalled) {
          callbackCalled = true;
          return callback(err, res ? x : null);
        }
      };
      howManyGot = howManyGot + 1;
      if (!!err || res || howManyGot === xs.length) {
        return call();
      }
    });
    each(function(x){
      return f(x, got(x));
    })(
    xs);
  };
  sortByA = function(f, xs, callback){
    null;
  };
  f1 = function(x, callback){
    return setTimeout(function(){
      return callback(null, x * x);
    }, 200);
  };
  f2 = function(x, callback){
    return setTimeout(function(){
      return callback(x === 7 ? 'ERROR at 7' : null, odd(x * x));
    }, 100);
  };
  f3 = function(x, callback){
    return setTimeout(function(){
      return callback(null, odd(x * x));
    }, 100);
  };
  f4 = function(x, callback){
    return setTimeout(function(){
      return callback(null, x * x > -1);
    }, 100);
  };
  mapA(f1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(err, res){
    console.log(err, res);
    return filterA(f3, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(err, res){
      console.log('filterA', err, res);
      return anyA(f3, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(err, res){
        console.log(err, res);
        return allA(f3, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(err, res){
          console.log(err, res);
          return findA(f3, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(err, res){
            return console.log('finA odd', err, res);
          });
        });
      });
    });
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
